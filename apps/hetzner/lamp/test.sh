#!/bin/bash
# set -ueo pipefail

export DEBIAN_FRONTEND=noninteractive

apt-get update
apt-get install -y expect

# Run installer.
expect <<"EXPECT"
#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Dec  1 08:08:59 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn /opt/hcloud/lamp_setup.sh
match_max 100000
expect -exact " ____________________________________________________________________\r
|                                                                    |\r
|   Welcome to the LAMP One-Click-App configuration.                 |\r
|                                                                    |\r
|   In this process LAMP (specifically Apache) will be set up        |\r
|   accordingly. You only need to set your desired Domain and        |\r
|   E-Mail which will be used to configure Apache and allow Let's    |\r
|   Encrypt to obtain a valid SSL Certificate.                       |\r
|   Please make sure your Domain exists first.                       |\r
|                                                                    |\r
|   Please enter the Domain in following pattern: your.example.com   |\r
|____________________________________________________________________|\r
\r
Please enter your details to set up your new Apache Instance.\r
Your Domain: "
send -- "test.com\r"
expect -exact "test.com\r
Your Email Address (for Let's Encrypt Notifications): "
send -- "test@test.com\r"
expect -exact "test@test.com\r
\r
Is the everything correct? \[Y/n\] "
send -- "Y\r"
expect -exact "Y\r
\r
\r
Do you want to create a Let's Encrypt Certificate for Domain test.com? \r
Note that the Domain needs to exist. \[Y/n\]: "
send -- "N\r"
expect eof
EXPECT

curl -s localhost | grep 'Hello World'
